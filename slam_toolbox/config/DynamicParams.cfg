#!/usr/bin/env python
#Unfortunately, when this config is used to generate headers for other code use, it appends a Config.h to the filename,
# so the naming convention had to be adjusted accordingly
PACKAGE = "slam_toolbox"
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

# need to find out what reasonable mins/maxs are for most of these (I have put some temp ones in for now and some I feel good about, but would be grate if checked)
# Syntax: gen.add(param name, type, level, description, defualt, min, max)
#                            -(the levels of changed parameters are bitwise ORed and passed as a param to the callback)

### ROS Parameters ###                                                                         # Probably none of these
gen.add("throttle_scans", int_t, 0, "Frequency at which scans are throttled (downsampled). 1 = every scan, 2 = every other scan is processed, etc", 1, 1, 5) # 1 definite lower bound, not sure about upper
gen.add("map_update_interval", double_t, 0, "Interval (in seconds) at which the map is updated", 0.02, 0.01, 1) # idk for bounds
gen.add("resolution", double_t, 0, "Resolution of the occupancy grid map (in meters per cell)", .05, 0.005, 1) # .5cm to 1m
gen.add("max_laser_range", double_t, 0, "Maximum range (in meters) of the laser to be considered for scan processing", 5.0 , 1, 50) # 1m to 50m
gen.add("minimum_time_interval", double_t, 0, "minimum time (in seconds) that must pass between processing one scan and the next", 0.5, 0.01, 2) #10ms to 2 sec

### General Parameters ###
gen.add("use_scan_barycenter",   bool_t,   0, "Whether to use the barycenter (center of mass) of scans as representations for scan matching",  True)
gen.add("minimum_travel_distance", double_t, 0, "Minimum distance (in meters) the robot must travel before a new scan is added to the pose graph", 0.5, 0.01, 5)
gen.add("minimum_travel_heading", double_t, 0, "Minimum heading change (in radians) required to add a new scan to the pose graph", 0.5, 0.01, 3.14) # bounded 0.5 degrees to 180 degrees (pi rad = inherint bound)

### Loop Closure (Primarily) Parameters ###
# largely skipping for now (some I already had implemented)
gen.add("loop_match_minimum_response_coarse", double_t, 0, "Minimum response (match quality) score for coarse matching during loop closure.", .85, 0.01, 10)
gen.add("loop_match_minimum_response_fine", double_t, 0, "Minimum response (match quality) score for fine matching during loop closure.", .95, 0.01, 10)

### Correlation Parameters - Loop Closure ###
# Skipping for now

### Correlation Parameters - Scan Matching (General) ###
gen.add("correlation_search_space_dimension", double_t, 0, "Dimension (in meters) of the search space for scan matching (around initial pose estimate)", 0.2, 0.01, 2)
gen.add("correlation_search_space_resolution", double_t, 0, "Resolution (in meters) of the search space grid used for scan matching", 0.01, 0.001, .25) # 1 mm to 25 cm
gen.add("correlation_search_space_smear_deviation", double_t, 0, "Standard deviation (in meters) for smear applied in the search space.", 0.1, 0.01, 1) # idk for bounds

### Scan Matcher Parameters ###
gen.add("angle_variance_penalty", double_t, 0, "Penalty applied for angle variance during scan matching", 2.0, 0.01, 1) # idk for bounds
gen.add("fine_search_angle_offset", double_t, 0, "Angle offset (in radians) for fine search in scan matching", 0.00175, 0.01, 1) # idk for bounds
gen.add("coarse_search_angle_offset", double_t, 0, "Angle offset (in radians) for coarse search in scan matching", 0.175, 0.01, 1) # idk for bounds
gen.add("coarse_angle_resolution", double_t, 0, "Resolution (in radians) for coarse angle during scan matching", 0.0175, 0.01, 1) # idk for bounds
gen.add("minimum_angle_penalty", double_t, 0, "Minimum penalty applied for angle differences during matching", 0.9, 0.01, 1) # idk for bounds
gen.add("minimum_distance_penalty", double_t, 0, "Minimum penalty applied for distance differences during matching", 0.5, 0.01, 1) # idk for bounds


### Data saving file name parameters
gen.add("loc_file_name",    str_t,    2, "the name of the file in the data_dir (param) that SLAM localization pose data will be saved to",  "loc_poses_1.txt")
gen.add("gt_file_name",    str_t,    2, "the name of the file in the data_dir (param) that ground truth pose data will be saved to",  "gt_poses_1.txt")
gen.add("cov_file_name",    str_t,    2, "the name of the file in the data_dir (param) that covariance data will be saved to",  "covariances_1.txt")
gen.add("latency_file_name",    str_t,    2, "the name of the file in the data_dir (param) that SLAM latency will be saved to",  "latencies_1.txt")


exit(gen.generate(PACKAGE, "slam_toolbox", "DynamicParams"))